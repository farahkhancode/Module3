Questions

1.Write pseudocode for bubble sort.

```
 FUNCTION bubbleSort(collection)
   REPEAT
     SET swapped to false
   FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
      IF collection[i]>collection[i+1] THEN
      SET temp to collection[i]
      SET collection[i] to collection[i+1]
      SET collection[i+1] to temp
      SET swapped to true    
    END IF
    END FOR
  UNTIL swapped is FALSE

  RETURN collection
  END FUNCTION
```

2.Write pseudocode for quicksort.

```
FUNCTION Partition(left, right, pivot)
  SET leftPointer to left
  SET rightPointer to right - 1

  IF leftPointer >= rightPointer
       break
  ELSE               
       swap leftPointer,rightPointer
  END IF
	
      swap leftPointer,right
      return leftPointer
	
END FUNCTION

FUNCTION quickSort(left, right)

   IF  right-left <= 0
        return
   ELSE     
      pivot = A[right]
      partition = partitionFunc(left, right, pivot)
      quickSort(left,partition-1)
      quickSort(partition+1,right)    
   END IF		
   
END FUNCTION
```

3.We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

`A: Quicksort and merge sort both have a time complexity of 0(n log n). Quick sort is more efficient than  other sorting methods because it can take variety of data, including large data sets and uses less memory. Merge sort is also efficient because is breaks the collection into sub collections which allows it to focus on and sort smaller sub collections(fewer comparisons).`


4.All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort? 


`A: Bucket Sort is a sorting algorithm that works by distributing the items of an array into a number of buckets for various ranges. It then sorts the items within each bucket individually and collects all the sorted items from all the buckets into the array.`
