Questions


1.What is a binary tree and what makes it unique to other trees?

 A: A binary tree is a data structure that organizes data starting at a root node which branches into 2 leading each to a node, and each node branches into 2 and so on.
Each node in binary search tree can have upto 2 children. For each node, its left descendant nodes are less than the current node, which is less than the right descendant nodes.


2.What is a heuristic?
  An educated guess algorithm for calculating all possible paths to solve a problem with best accuracy and shortest amount of time.

3.What is another problem besides the shortest-path problem that requires the use of heuristics?  Stores may use heuristics to estimate how much inventory they need for a particular product. Popular products will fly off shelves faster than unpopular ones. Stores may want to pre-order those products to make sure they have stock before they run out.

4.What is the difference between a depth-first search and a breadth-first search?
A: These are 2 ways of going through child data. Depth-First-Search pattern may always choose to go through the right side as long as there is a possible right. 
With a Breadth-First Search (BFS), we search an entire row of Nodes before we proceed to the next. 

5.Explain in your own words what an undirected, a-cyclic, unweighted graph is.
 A: A undirected, a-cyclic, unweighted graph is one that that allows bidirectional search through nodes, is NOT a closed loop of nodes, and has no cost or "weight" associated with search between nodes.

6.What kind of graph is a binary search tree?
 A: A binary tree is a undirected, a-cyclic graph and can be weighted or unweighted.



Programming Questions


1.Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

Check root node to see if value is present.
If not, proceed to left sides of branching to check if value is less than root node. If not, check right side branching.


BinarySearchTree.prototype.isPresent = function(value){
    var found  = false,
    var current = this.root

    while(!found && current){

      if (value === current.value){
        found = true; 
      } 
      
      if (value < current.value){
        current = current.left;

      } else {
        current = current.right;
      }
    }
    return found;
  }
}


Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

2.Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

We want to check the distance between each node and the root node to find the shortest path.


function findDistance(root, n1, n2){
  if (root === null || n1 === n2){
    return 0;
  }
 
  distance.left = findDistance(root.left, n1, n2);
  distance.right = findDistance(root.right, n1, n2);

  if (distance.left > 0 && distance.right > 0){
    return distance.left + distance.right;
  }
  if (distance.left > 0 && root === n1 || n2){
    return distance.left;
  }
  if (distance.right > 0 && root === n1 || n2){
    return distance.right;
  }
    
}


