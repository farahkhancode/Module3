1.What is time complexity and what is its relation to algorithms?
A: Time complexity is the estimated amount of time it takes for a program to run algorithms. It helps understand how an algorithm's speed changes based on input size.

2.What is runtime?
A: The physical time duration for an algorithm to complete running. Often used interchangeably with time complexity.

3.How is the runtime of an algorithm calculated?
A: Runtime is often used interchangeably with time complexity. Time complexity is determined by adding up how many instructions the algorithm will execute based on the input size, then simplifying the expression to the largest term and dropping any constants. Graphs can visually represent runtime with input size on the x-axis and runtime on the y-axis.


4.Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A:
-Most efficient-
Constant
Logarithmic
Linear
Log-Linear
Quadratic
**Cubic Growth Rate**
Exponential
-Least Efficient-


5.Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: Linear growth rate: Waiting in a queue for a ride at the amusement park.

6.Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION


A: The time complexity of function linearSearch is O(n), it has a constant growth rate.


7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION


A: The time complexity of function foo is 0(n^2), it has a quadratic growth rate.

8.Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION


A: The time complexity of function Fibonacci is 0(2^n), it has an exponential growth rate.



9.Out of the code snippets you just saw, which is the most time efficient?
A: Function linearSearch has the most efficient time complexity of 0(n) and it has a constant growth rate.

